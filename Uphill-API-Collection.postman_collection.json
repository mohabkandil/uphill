{
	"info": {
		"_postman_id": "uphill-api-collection",
		"name": "Uphill API Collection",
		"description": "Comprehensive Postman collection for testing the Uphill healthcare appointment booking system. Covers authentication, appointment creation, querying, error handling, and idempotency scenarios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.token).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response contains user info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('role', 'ADMIN');",
									"});",
									"",
									"// Store token for subsequent requests",
									"if (pm.response.json().success) {",
									"    pm.environment.set('auth_token', pm.response.json().data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@uphill.com\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Successful login with valid admin credentials"
					},
					"response": []
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains error code\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('INVALID_CREDENTIALS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@uphill.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login attempt with invalid password"
					},
					"response": []
				},
				{
					"name": "Login - Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login attempt with missing email field"
					},
					"response": []
				},
				{
					"name": "Login - Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login attempt with invalid email format"
					},
					"response": []
				}
			],
			"description": "Authentication scenarios including successful login, invalid credentials, and validation errors"
		},
		{
			"name": "Appointment Creation",
			"item": [
				{
					"name": "Create Appointment - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains appointment details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('appointmentId');",
									"    pm.expect(jsonData.data).to.have.property('doctorName');",
									"    pm.expect(jsonData.data).to.have.property('roomName');",
									"    pm.expect(jsonData.data).to.have.property('date');",
									"    pm.expect(jsonData.data).to.have.property('timeSlot');",
									"});",
									"",
									"// Store appointment ID for subsequent tests",
									"if (pm.response.json().success) {",
									"    pm.environment.set('appointment_id', pm.response.json().data.appointmentId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": 1,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-15\",\n    \"timeSlot\": \"09:00-10:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Successfully create a new appointment"
					},
					"response": []
				},
				{
					"name": "Create Appointment - Missing Patient ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-15\",\n    \"timeSlot\": \"09:00-10:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Create appointment with missing patientId field"
					},
					"response": []
				},
				{
					"name": "Create Appointment - Invalid Time Slot Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": 1,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-15\",\n    \"timeSlot\": \"9:00-10:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Create appointment with invalid time slot format (should be HH:MM-HH:MM)"
					},
					"response": []
				},
				{
					"name": "Create Appointment - Negative Patient ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": -1,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-15\",\n    \"timeSlot\": \"09:00-10:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Create appointment with negative patient ID (should fail validation)"
					},
					"response": []
				},
				{
					"name": "Create Appointment - Malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains malformed JSON error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('MALFORMED_JSON');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": 1,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-15\",\n    \"timeSlot\": \"09:00-10:00\"\n    // Missing closing brace"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Create appointment with malformed JSON"
					},
					"response": []
				}
			],
			"description": "Appointment creation scenarios including success cases and various validation errors"
		},
		{
			"name": "Appointment Queries",
			"item": [
				{
					"name": "Get Appointments - With Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains paginated data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('content');",
									"    pm.expect(jsonData.data).to.have.property('totalElements');",
									"    pm.expect(jsonData.data).to.have.property('totalPages');",
									"    pm.expect(jsonData.data).to.have.property('size');",
									"    pm.expect(jsonData.data).to.have.property('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Get all appointments with authentication"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('AUTHENTICATION_REQUIRED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Attempt to get appointments without authentication"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Filter by Patient ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"All appointments belong to patient 1\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.content && jsonData.data.content.length > 0) {",
									"        jsonData.data.content.forEach(appointment => {",
									"            // Note: This test assumes the response includes patientId",
									"            // Adjust based on actual response structure",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments?patientId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							],
							"query": [
								{
									"key": "patientId",
									"value": "1"
								}
							]
						},
						"description": "Get appointments filtered by patient ID"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Filter by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments?status=BOOKED",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							],
							"query": [
								{
									"key": "status",
									"value": "BOOKED"
								}
							]
						},
						"description": "Get appointments filtered by status"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Filter by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments?startDate=2025-01-01&endDate=2025-01-31",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2025-01-01"
								},
								{
									"key": "endDate",
									"value": "2025-01-31"
								}
							]
						},
						"description": "Get appointments filtered by date range"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Page size is 5\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.size).to.eql(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments?page=0&size=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						},
						"description": "Get appointments with pagination (page 0, size 5)"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Invalid Status Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains invalid status filter error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('INVALID_STATUS_FILTER');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments?status=INVALID_STATUS",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							],
							"query": [
								{
									"key": "status",
									"value": "INVALID_STATUS"
								}
							]
						},
						"description": "Get appointments with invalid status filter"
					},
					"response": []
				},
				{
					"name": "Get Appointments - Invalid Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains invalid date filter error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('INVALID_DATE_FILTER');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments?startDate=2025/01/01",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2025/01/01"
								}
							]
						},
						"description": "Get appointments with invalid date format"
					},
					"response": []
				}
			],
			"description": "Appointment query scenarios including authentication, filtering, pagination, and error cases"
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Invalid HTTP Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains method not allowed error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('METHOD_NOT_ALLOWED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": 1,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-15\",\n    \"timeSlot\": \"09:00-10:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Attempt to use PUT method on appointments endpoint (should return 405)"
					},
					"response": []
				},
				{
					"name": "Non-existent Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains not found error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('NOT_FOUND');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/nonexistent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"nonexistent"
							]
						},
						"description": "Attempt to access non-existent endpoint"
					},
					"response": []
				},
				{
					"name": "Unsupported Media Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains unsupported media type error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('UNSUPPORTED_MEDIA_TYPE');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "patientId=1&specialtyId=1&date=2025-01-15&timeSlot=09:00-10:00"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Send request with unsupported media type (text/plain instead of application/json)"
					},
					"response": []
				},
				{
					"name": "Invalid JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has success false\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});",
									"",
									"pm.test(\"Response contains authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorCode).to.eql('AUTHENTICATION_REQUIRED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.jwt.token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Attempt to access protected endpoint with invalid JWT token"
					},
					"response": []
				}
			],
			"description": "Error handling scenarios including invalid HTTP methods, non-existent endpoints, and authentication errors"
		},
		{
			"name": "Idempotency Testing",
			"item": [
				{
					"name": "Create Appointment - Idempotent Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique idempotency key",
									"const idempotencyKey = 'test-idempotency-' + Date.now();",
									"pm.environment.set('idempotency_key', idempotencyKey);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"// Store appointment ID for duplicate request test",
									"if (pm.response.json().success) {",
									"    pm.environment.set('idempotent_appointment_id', pm.response.json().data.appointmentId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "{{idempotency_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": 2,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-16\",\n    \"timeSlot\": \"10:00-11:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "First request with idempotency key"
					},
					"response": []
				},
				{
					"name": "Create Appointment - Duplicate Idempotent Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Same appointment ID returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedId = pm.environment.get('idempotent_appointment_id');",
									"    pm.expect(jsonData.data.appointmentId).to.eql(parseInt(expectedId));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "{{idempotency_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientId\": 2,\n    \"specialtyId\": 1,\n    \"date\": \"2025-01-16\",\n    \"timeSlot\": \"10:00-11:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"appointments"
							]
						},
						"description": "Duplicate request with same idempotency key (should return same result)"
					},
					"response": []
				}
			],
			"description": "Idempotency testing scenarios to ensure duplicate requests return the same result"
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Application Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains health status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Check application health status"
					},
					"response": []
				}
			],
			"description": "Health check endpoints to verify application status"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// Set default base URL if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has valid JSON\", function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
